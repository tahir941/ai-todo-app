{"ast":null,"code":"// src/redux/slices/authSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nfunction safeParseJSON(item) {\n  try {\n    return JSON.parse(item);\n  } catch {\n    // If parsing fails, remove the corrupted item and return null\n    localStorage.removeItem('user');\n    return null;\n  }\n}\n\n// Load token and user from localStorage safely\nconst token = localStorage.getItem('token') || null;\nconst user = safeParseJSON(localStorage.getItem('user'));\nconst initialState = {\n  user,\n  token,\n  status: 'idle',\n  error: null\n};\n\n// Async thunk for login\nexport const loginUser = createAsyncThunk('auth/loginUser', async ({\n  email,\n  password\n}, thunkAPI) => {\n  try {\n    const response = await axios.post('http://localhost:5000/api/auth/login', {\n      email,\n      password\n    });\n    console.log('Login response.data:', response.data);\n    const {\n      token,\n      user,\n      error\n    } = response.data;\n    if (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n    if (!token) {\n      return thunkAPI.rejectWithValue('Invalid login response: Missing token');\n    }\n    if (!user) {\n      return thunkAPI.rejectWithValue('Invalid login response: Missing user details');\n    }\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n      token,\n      user\n    };\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error('Login request failed:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    return thunkAPI.rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Login failed');\n  }\n});\n\n// Async thunk for register\nexport const registerUser = createAsyncThunk('auth/registerUser', async ({\n  username,\n  email,\n  password\n}, thunkAPI) => {\n  try {\n    const response = await axios.post('http://localhost:5000/api/auth/register', {\n      username,\n      email,\n      password\n    });\n    const {\n      token,\n      user,\n      error\n    } = response.data;\n    if (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n    if (!token) {\n      return thunkAPI.rejectWithValue('Invalid registration response: Missing token');\n    }\n    if (!user) {\n      return thunkAPI.rejectWithValue('Invalid registration response: Missing user details');\n    }\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n      token,\n      user\n    };\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error('Registration request failed:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    return thunkAPI.rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Registration failed');\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.status = 'idle';\n      state.error = null;\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // login\n    .addCase(loginUser.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.error = null;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    })\n\n    // register\n    .addCase(registerUser.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(registerUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.error = null;\n    }).addCase(registerUser.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","safeParseJSON","item","JSON","parse","localStorage","removeItem","token","getItem","user","initialState","status","error","loginUser","email","password","thunkAPI","response","post","console","log","data","rejectWithValue","setItem","stringify","_error$response","_error$response2","_error$response2$data","message","registerUser","username","_error$response3","_error$response4","_error$response4$data","authSlice","name","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/Users/ENGINES/Desktop/ai-todo-app/client/src/redux/slices/authSlice.js"],"sourcesContent":["// src/redux/slices/authSlice.js\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nfunction safeParseJSON(item) {\r\n  try {\r\n    return JSON.parse(item);\r\n  } catch {\r\n    // If parsing fails, remove the corrupted item and return null\r\n    localStorage.removeItem('user');\r\n    return null;\r\n  }\r\n}\r\n\r\n// Load token and user from localStorage safely\r\nconst token = localStorage.getItem('token') || null;\r\nconst user = safeParseJSON(localStorage.getItem('user'));\r\n\r\nconst initialState = {\r\n  user,\r\n  token,\r\n  status: 'idle',\r\n  error: null,\r\n};\r\n\r\n// Async thunk for login\r\nexport const loginUser = createAsyncThunk(\r\n  'auth/loginUser',\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n      console.log('Login response.data:', response.data);\r\n\r\n      const { token, user, error } = response.data;\r\n\r\n      if (error) {\r\n        return thunkAPI.rejectWithValue(error);\r\n      }\r\n      if (!token) {\r\n        return thunkAPI.rejectWithValue('Invalid login response: Missing token');\r\n      }\r\n      if (!user) {\r\n        return thunkAPI.rejectWithValue('Invalid login response: Missing user details');\r\n      }\r\n\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      return { token, user };\r\n    } catch (error) {\r\n      console.error('Login request failed:', error.response?.data || error.message);\r\n      return thunkAPI.rejectWithValue(error.response?.data?.error || 'Login failed');\r\n    }\r\n  }\r\n);\r\n\r\n// Async thunk for register\r\nexport const registerUser = createAsyncThunk(\r\n  'auth/registerUser',\r\n  async ({ username, email, password }, thunkAPI) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n        username,\r\n        email,\r\n        password,\r\n      });\r\n      const { token, user, error } = response.data;\r\n\r\n      if (error) {\r\n        return thunkAPI.rejectWithValue(error);\r\n      }\r\n      if (!token) {\r\n        return thunkAPI.rejectWithValue('Invalid registration response: Missing token');\r\n      }\r\n      if (!user) {\r\n        return thunkAPI.rejectWithValue('Invalid registration response: Missing user details');\r\n      }\r\n\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      return { token, user };\r\n    } catch (error) {\r\n      console.error('Registration request failed:', error.response?.data || error.message);\r\n      return thunkAPI.rejectWithValue(error.response?.data?.error || 'Registration failed');\r\n    }\r\n  }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.token = null;\r\n      state.status = 'idle';\r\n      state.error = null;\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // login\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.status = 'loading';\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.user = action.payload.user;\r\n        state.token = action.payload.token;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      })\r\n\r\n      // register\r\n      .addCase(registerUser.pending, (state) => {\r\n        state.status = 'loading';\r\n        state.error = null;\r\n      })\r\n      .addCase(registerUser.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.user = action.payload.user;\r\n        state.token = action.payload.token;\r\n        state.error = null;\r\n      })\r\n      .addCase(registerUser.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}